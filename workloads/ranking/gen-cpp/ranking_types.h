/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ranking_TYPES_H
#define ranking_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace ranking {

class Payload;

typedef struct _Payload__isset {
  _Payload__isset() : message(false) {}
  bool message :1;
} _Payload__isset;

class Payload : public virtual ::apache::thrift::TBase {
 public:

  Payload(const Payload&);
  Payload(Payload&&);
  Payload& operator=(const Payload&);
  Payload& operator=(Payload&&);
  Payload() : message() {
  }

  virtual ~Payload() noexcept;
  std::string message;

  _Payload__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const Payload & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const Payload &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Payload & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Payload &a, Payload &b);

std::ostream& operator<<(std::ostream& out, const Payload& obj);

} // namespace

#endif
