/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ranking_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace ranking {


Payload::~Payload() noexcept {
}


void Payload::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const Payload& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Payload::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Payload::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Payload");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Payload &a, Payload &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

Payload::Payload(const Payload& other0) {
  message = other0.message;
  __isset = other0.__isset;
}
Payload::Payload( Payload&& other1) {
  message = std::move(other1.message);
  __isset = std::move(other1.__isset);
}
Payload& Payload::operator=(const Payload& other2) {
  message = other2.message;
  __isset = other2.__isset;
  return *this;
}
Payload& Payload::operator=(Payload&& other3) {
  message = std::move(other3.message);
  __isset = std::move(other3.__isset);
  return *this;
}
void Payload::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Payload(";
  out << "message=" << to_string(message);
  out << ")";
}

} // namespace
